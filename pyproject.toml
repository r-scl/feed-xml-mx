[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "feedxml-mx"
version = "2.0.0"
description = "Enhanced XML feed processor for Accu-Chek Mexico with web scraping capabilities"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "FeedXML-MX Team", email = "team@feedxml-mx.com"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["xml", "feed", "scraping", "ecommerce", "product-data"]
requires-python = ">=3.10"
dependencies = [
    "requests>=2.31.0",
    "playwright>=1.40.0",
    "beautifulsoup4>=4.12.2",
    "lxml>=4.9.3",
    "pydantic>=2.5.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    "structlog>=23.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/feedxml-mx/feedxml-mx"
Documentation = "https://feedxml-mx.readthedocs.io"
Repository = "https://github.com/feedxml-mx/feedxml-mx.git"
Issues = "https://github.com/feedxml-mx/feedxml-mx/issues"

[project.scripts]
feedxml-mx = "feed_processor_2025:main"

[tool.hatch.build.targets.wheel]
packages = ["src/feedxml_mx"]

[tool.ruff]
line-length = 120
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "S101",  # use of assert (ok in tests)
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["S101", "PLR2004"]
"*test*.py" = ["S101", "PLR2004"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "bs4.*",
    "asyncio_throttle.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--cov=feedxml_mx",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["feedxml_mx"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for test files

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]